{"version":3,"sources":["react-bootstrap.svg","dp-logo.png","components/footer.js","components/cookie-notification.js","components/note-pad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","className","Container","Navbar","bg","variant","sticky","Nav","Date","getFullYear","href","Image","src","ReactBootstrapLogo","alt","fluid","rounded","width","height","CookieNotification","location","buttonText","cookieName","style","background","buttonStyle","color","fontSize","expires","NotePad","props","console","log","handleInputChange","event","target","value","name","wordCount","replace","split","length","charCount","setState","clearData","notes","formatJSON","notesFormatted","JSON","stringify","undefined","state","bind","Brand","BrandLogo","this","Row","Col","sm","Form","Group","controlId","Control","placeholder","as","rows","onChange","Button","type","onClick","Alert","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db85fba4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-bootstrap.83fe61b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/dp-logo.b49a8088.png\";","import React from \"react\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport ReactBootstrapLogo from \"../react-bootstrap.svg\";\nimport Image from \"react-bootstrap/Image\";\nfunction Footer() {\n  return (\n    <div id=\"home\" className=\"text-white text-center\">\n      <Container>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n        <Nav className=\"navbar-text col-md-12 col-sm-12 col-xs-12\">\n          &copy; {new Date().getFullYear()} &nbsp;&amp; Developed By &nbsp;{\" \"}\n          <a href=\"https://www.linkedin.com/in/subratamazumder/\">\n            Subrata Mazumder\n          </a>\n        </Nav>\n      </Navbar>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n        <Nav className=\"navbar-text col-md-12 col-sm-12 col-xs-12\">\n          Powered By &nbsp;\n          <a href=\"https://react-bootstrap.github.io/\">\n            <Image\n              src={ReactBootstrapLogo}\n              alt=\"React Bootstrap\"\n              fluid\n              rounded\n              width=\"30\"\n              height=\"30\"\n            />\n          </a>\n        </Nav>\n      </Navbar>\n      </Container>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport CookieConsent from \"react-cookie-consent\";\nfunction CookieNotification() {\n  return (\n    <div>\n      <CookieConsent\n        location=\"bottom\"\n        buttonText=\"I understand\"\n        cookieName=\"subrataSiteCookie\"\n        style={{ background: \"#2B373B\" }}\n        buttonStyle={{ color: \"#4e503b\", fontSize: \"13px\" }}\n        expires={150}\n      >\n        This website uses cookies to personalise content and ads, to provide\n        social media features and to analyse our traffic. <br />\n        <span style={{ fontSize: \"10px\" }}>\n          Also share information about your use of our site with analytics\n          partners who may combine it with other information that you’ve\n          provided to them or that they’ve collected from your use of their\n          services\n        </span>\n      </CookieConsent>\n    </div>\n  );\n}\n\nexport default CookieNotification;\n","import React from \"react\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport BrandLogo from \"../dp-logo.png\";\nimport Alert from \"react-bootstrap/Alert\";\nimport JSONFormatter from \"json-formatter-js\";\nclass NotePad extends React.Component {\n  constructor(props) {\n    console.log(\"NotePad constructing\");\n    super(props);\n    this.state = {\n      notes: \"\",\n      wordCount: 0,\n      charCount: 0\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.clearData = this.clearData.bind(this);\n    this.formatJSON = this.formatJSON.bind(this);\n  }\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    //count words\n    const allText = target.value;\n    const wordCount = allText\n      .replace(/(^\\s*)|(\\s*$)/gi, \"\")\n      .replace(/[ ]{2,}/gi, \" \")\n      .replace(/\\n /, \"\\n\")\n      .split(\" \").length;\n    //count charecter\n    const charCount = value.length;\n    this.setState({\n      [name]: value,\n      wordCount: wordCount,\n      charCount: charCount\n    });\n  };\n\n  clearData = event => {\n    this.setState({\n      notes: \"\",\n      wordCount: 0,\n      charCount: 0\n    });\n  };\n  formatJSON = event => {\n    \n    const notesFormatted = JSON.stringify(this.notes, undefined, 4);\n    console.log(\"formatting....\",notesFormatted)\n    this.setState({\n      notes: notesFormatted\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                alt=\"\"\n                src={BrandLogo}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />{\" \"}\n              Subrata Mazumder\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <div className=\"text-white font-weight-bold\">My Notepad</div>\n            </Nav>\n            <Nav>\n              <div className=\"text-white\">\n                Word Count-{this.state.wordCount} Charecter Count-\n                {this.state.charCount}\n              </div>\n            </Nav>\n          </Navbar>\n          <Row>\n            <Col sm>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control\n                  placeholder=\"Type your text here\"\n                  as=\"textarea\"\n                  rows=\"15\"\n                  name=\"notes\"\n                  value={this.state.notes}\n                  onChange={this.handleInputChange}\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm>\n              <div className=\"text-center\">\n                <Button\n                  variant=\"dark\"\n                  type=\"submit\"\n                  className=\"font-weight-bold\"\n                  onClick={this.clearData}\n                >\n                  Clear\n                </Button>\n                {/* &nbsp;\n                <Button\n                  variant=\"dark\"\n                  type=\"submit\"\n                  className=\"font-weight-bold\"\n                  onClick={this.formatJSON}\n                >\n                  FormatJSON\n                </Button> */}\n              </div>\n            </Col>\n          </Row>\n          <Row><br/></Row>\n          <Row>\n            <Col sm>\n              <Alert variant=\"info\" className=\"text-center\">\n                <h5>\n                  <i>\n                    <q>\n                      This is a stateless application, does not store typed text\n                      to any persistance storage.\n                    </q>\n                  </i>\n                </h5>\n              </Alert>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default NotePad;\n","import React from \"react\";\nimport \"./App.css\";\nimport Footer from \"./components/footer\";\nimport CookieNotification from \"./components/cookie-notification\";\nimport NotePad from \"./components/note-pad\";\nfunction App() {\n  return (\n    <div>\n      <NotePad></NotePad>\n      <Footer></Footer>\n      <CookieNotification></CookieNotification>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}